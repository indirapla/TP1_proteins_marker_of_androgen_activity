# List of packages to install
.packages = c("MASS", "bootStepAIC")
# Install packages if not installed
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages
lapply(.packages, require, character.only=TRUE)
Big.table <- as.data.frame(readxl::read_excel("Healthy_model_Signif_biomarkers.xlsx")) # Read the file data
Big.table <- as.data.frame(readxl::read_excel("C:/Users/yhd5105/Documents/GitHub/TP1_proteins_marker_of_androgen_activity/dataHealthy_model_Signif_biomarkers.xlsx")) # Read the file data
Big.table <- as.data.frame(readxl::read_excel("C:/Users/yhd5105/Documents/GitHub/TP1_proteins_marker_of_androgen_activity/data/Healthy_model_Signif_biomarkers.xlsx")) # Read the file data
rownames(Big.table) <- Big.table[,1]
Big.table <- dplyr::select(Big.table, -id)
data1 <- dplyr::select(Big.table, -Patient)
mod1 <- glm(Time_point ~ `4HPPD`+ ALDOB + IGFBP6,
data = data1,
family = "binomial")
summary(mod1)
library(MASS)
mod_step <- stepAIC(mod1, direction = "backward", trace = F)
mod_step
# Bootstraps the Stepwise Algorithm of stepAIC() for Choosing a Model by AIC
library(bootStepAIC)
mod_boot <- boot.stepAIC(mod1, data = data1, B=50)
mod_boot
# List of packages to install
.packages = c("pROC","ggplot2","nlme","reshape","dplyr","FactoMineR")
# Install packages if not installed
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Loading packages
lapply(.packages, require, character.only=TRUE)
plot_roc.fn <- function(matrix,from.col,to.col, group.col, plots=F){
colnames1 <- as.character(colnames(matrix))
AUC.matrix <- matrix(nrow=ncol(matrix),ncol = 6)
colnames(AUC.matrix) <- c("AUC.CI","LL (95% CI)","UL (95% CI)","p-value","Sp","Se")
for(i in from.col:to.col) {
#hist(matrix[,i], main=colnames(matrix)[i])
png(filename = paste("roc_",colnames1[i],".png",sep=""),width = 480, height = 480, units = "px", pointsize = 16,
bg = "white", res = NA, family = "", restoreConsole = TRUE,type = c("windows", "cairo", "cairo-png"))
roc_i <- roc(matrix[,group.col] ~ matrix[,i],data=matrix,percent=T,
smooth=F,
legacy.axes=F,
ci=F,
boot.n=2000,
ci.alpha=0.7,
stratified=T,
plot=plots,
auc.polygon=T,
max.auc.polygon=T,
grid=TRUE,
print.auc=TRUE,
print.thres='best',
print.thres.best.method='y',   # "closest.topleft", "youden"
print.thres.adj=c(-0.7, 1.5),#,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.2f    \n\n\nSpec: %.1f \nSens: %.1f",
print.thres.pattern.cex = 1.1,
print.auc.cex = 1.1,
print.auc.y=7,
print.auc.x=83,
cex.axis=1.5,
cex.lab=1.5,
print.thres.pch=16,
print.thres.cex=2.0,
cex.main=1.5)
print(roc_i)
dev.off()
# Compute the confidence interval of the AUC (bootstrap method)
ci.auc1 <- ci.auc(roc_i,
conf.level=0.95,
boot.n = 10000,
method = "bootstrap")  # Default: 2000.
AUC.matrix[i,1] <- roc_i$auc
AUC.matrix[i,2] <- ci.auc1[1]
AUC.matrix[i,3] <- ci.auc1[3]
# AUC.vector <- c(paste("auc = ",round(roc_i$auc,3), sep = ""),
#                 paste("LL(95% CI) = ",round(ci.auc1[1],3), sep = ""),
#                 paste("UP(95% CI) = ",round(ci.auc1[3],3), sep = ""))
ROC_table <- cbind(roc_i$thresholds, roc_i$specificities, roc_i$sensitivities)
cut_off <- ROC_table[which.max(ROC_table[, 2] + ROC_table[, 3]), ]
roc.A <- verification::roc.area(roc_i$original.response,roc_i$original.predictor)
AUC.matrix[i,4] <- roc.A$p.value  ## p.value
AUC.matrix[i,5] <- cut_off[2]     ## Sp
AUC.matrix[i,6] <- cut_off[3]     ## Se
roc_i.newlist <- list(AUC = as.matrix(roc_i$auc),
sens.= as.matrix(roc_i$sensitivities),
Spec.= as.matrix(roc_i$specificities),
Thesholds = as.matrix(roc_i$thresholds),
predictor = as.matrix(roc_i$predictor),
response = as.data.frame(roc_i$response),
plots=F)
write.infile(roc_i.newlist, paste("roc_",colnames1[i],".txt",sep=''), sep = "\t")
}
row.names(AUC.matrix) <- colnames(matrix)
write.csv(AUC.matrix, "AUC.matrix.csv")
}
Big.table <- as.data.frame(readxl::read_excel("C:/Users/yhd5105/Documents/GitHub/TP1_proteins_marker_of_androgen_activity/data/Healthy_model_Signif_biomarkers.xlsx")) # Read the file data
rownames(Big.table) <- Big.table[,1]
Big.table <- dplyr::select(Big.table, -id)
DATA <- dplyr::select(Big.table, -Patient)
glm.ht = glm(Testo_status_num ~ HPPD + IGFBP6, data = DATA, family="binomial")
View(DATA)
glm.ht = glm(Time_point ~ HPPD + IGFBP6, data = DATA, family="binomial")
names(DATA)
#===================
##====Multivariable Logistic regression ===================================================
library(dplyr)
DATA <- dplyr::select(Big.table, -Patient)|>
rename(HPPD = '4HPPD')
names(DATA)
glm.ht = glm(Time_point ~ HPPD + IGFBP6, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "MMA"
MMA$sample <- row.names(MMA)
DATA$sample <- row.names(DATA)
DATA1 <- plyr::join_all(list(DATA,MMA),by="sample")
DATA1 <- select(DATA1, -sample)
DATA1a <- DATA1[,c("Testo_status","MMA")]
DATA1a <- DATA1[,c("Time_point","MMA")]
DATA1a <- na.omit(DATA1a)
roc2 <- roc(DATA1a$Testo_status ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
#ci.se1 <- as.data.frame(ci.se(roc1))
#ci.sp1 <- ci.sp(roc1)
OR <- as.data.frame(roc2$original.response)
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
View(DATA1a)
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
#print.thres='best',
print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
#print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
#print.thres.best.method='y',     # "closest.topleft", "youden"
#print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
#print.thres.best.method='y',     # "closest.topleft", "youden"
#print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
roc2 <- roc(DATA1a$Time_point ~ DATA1a$MMA, data=DATA1a, smooth=F,
percent=TRUE, plot=T, ci=TRUE,
print.thres='best',
#print.thres.best.method='y',     # "closest.topleft", "youden"
print.thres.adj=c(-0.05, 1.25),  #,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.3f \n\nSp: %.3f \nSe: %.3f")
glm.ht = glm(Time_point ~ HPPD + IGFBP6, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "HPPD_IGBP6"
MMA$sample <- row.names(MMA)
View(MMA)
DATA$sample <- row.names(DATA)
DATA1 <- plyr::join_all(list(DATA,MMA),by="sample")
View(DATA1)
#==HPPD + ALDOB
glm.ht = glm(Time_point ~ HPPD + ALDOB, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "HPPD_ALDOB"
MMA$sample <- row.names(MMA)
DATA1 <- plyr::join_all(list(DATA,MMA),by="sample")
View(DATA1)
# HPPD + IGBP6
glm.ht = glm(Time_point ~ HPPD + IGFBP6, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "HPPD_IGBP6"
MMA$sample <- row.names(MMA)
DATA1 <- plyr::join_all(list(DATA,MMA),by="sample")
#==HPPD + ALDOB
glm.ht = glm(Time_point ~ HPPD + ALDOB, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "HPPD_ALDOB"
MMA$sample <- row.names(MMA)
DATA1 <- plyr::join_all(list(DATA1,MMA),by="sample")
View(DATA1)
#==IGBP6 + ALDOB
glm.ht = glm(Time_point ~ IGPP6 + ALDOB, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
#==IGBP6 + ALDOB
glm.ht = glm(Time_point ~ IGBP6 + ALDOB, data = DATA, family="binomial")
#==IGBP6 + ALDOB
glm.ht = glm(Time_point ~ IGFBP6 + ALDOB, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "IGFBP6_ALDOB"
MMA$sample <- row.names(MMA)
DATA1 <- plyr::join_all(list(DATA1,MMA),by="sample")
View(DATA1)
#==IGBP6 + ALDOB
glm.ht = glm(Time_point ~ HPPD + IGFBP6 + ALDOB, data = DATA, family="binomial")
#==HPPD + IGBP6 + ALDOB
glm.ht = glm(Time_point ~ HPPD + IGFBP6 + ALDOB, data = DATA, family="binomial")
MMA <- as.data.frame(predict(glm.ht, type = "response"))   # save the predicted log-odds (of being low testosterone) for each observation
colnames(MMA) <- "HPPD_IGFBP6_ALDOB"
MMA$sample <- row.names(MMA)
DATA1 <- plyr::join_all(list(DATA1,MMA),by="sample")
View(DATA1)
#------------
Low.test <- DATA.1[, c("Time_point", "HPPD_IGBP6","HPPD_ALDOB","IGFBP6_ALDOB","HPPD_IGFBP6_ALDOB")]
#------------
Low.test <- DATA1[, c("Time_point", "HPPD_IGBP6","HPPD_ALDOB","IGFBP6_ALDOB","HPPD_IGFBP6_ALDOB")]
View(Low.test)
LT.model <- Low.test$Time_point ~ HPPD_IGBP6+HPPD_ALDOB+IGFBP6_ALDOB+HPPD_IGFBP6_ALDOB
roc_i.list.LT <- roc(LT.model,percent=T, smooth=F, legacy.axes=F,ci=TRUE, data = Low.test)
roc_i.list.LT
# Graph Multicurve
gg.LT<- ggroc(roc_i.list.LT, linetype=1,size = 0.75)+
theme_bw()+labs()+ggtitle("Low testosterone")+
theme(legend.title = element_blank())+
geom_segment(aes(x = 100, xend = 0, y = 0, yend = 100), color="black", linetype="dashed",size = 0.5)
gg.LT
plot_roc.fn(Low.test, from.col = 2, to.col = ncol(Low.test), group.col = "Time_point")
plot_roc.fn <- function(matrix,from.col,to.col, group.col, plots=F){
colnames1 <- as.character(colnames(matrix))
AUC.matrix <- matrix(nrow=ncol(matrix),ncol = 6)
colnames(AUC.matrix) <- c("AUC.CI","LL (95% CI)","UL (95% CI)","p-value","Sp","Se")
for(i in from.col:to.col) {
#hist(matrix[,i], main=colnames(matrix)[i])
png(filename = paste("roc_",colnames1[i],".png",sep=""),width = 480, height = 480, units = "px", pointsize = 16,
bg = "white", res = NA, family = "", restoreConsole = TRUE,type = c("windows", "cairo", "cairo-png"))
roc_i <- roc(matrix[,group.col] ~ matrix[,i],data=matrix,percent=T,
smooth=F,
legacy.axes=F,
ci=F,
boot.n=2000,
ci.alpha=0.7,
stratified=T,
plot=plots,
auc.polygon=T,
max.auc.polygon=T,
grid=TRUE,
print.auc=TRUE,
print.thres='best',
print.thres.best.method='y',   # "closest.topleft", "youden"
print.thres.adj=c(-0.7, 1.5),#,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.2f    \n\n\nSpec: %.1f \nSens: %.1f",
print.thres.pattern.cex = 1.1,
print.auc.cex = 1.1,
print.auc.y=7,
print.auc.x=83,
cex.axis=1.5,
cex.lab=1.5,
print.thres.pch=16,
print.thres.cex=2.0,
cex.main=1.5)
print(roc_i)
dev.off()
# Compute the confidence interval of the AUC (bootstrap method)
ci.auc1 <- ci.auc(roc_i,
conf.level=0.95,
boot.n = 10000,
method = "bootstrap")  # Default: 2000.
AUC.matrix[i,1] <- roc_i$auc
AUC.matrix[i,2] <- ci.auc1[1]
AUC.matrix[i,3] <- ci.auc1[3]
# AUC.vector <- c(paste("auc = ",round(roc_i$auc,3), sep = ""),
#                 paste("LL(95% CI) = ",round(ci.auc1[1],3), sep = ""),
#                 paste("UP(95% CI) = ",round(ci.auc1[3],3), sep = ""))
ROC_table <- cbind(roc_i$thresholds, roc_i$specificities, roc_i$sensitivities)
cut_off <- ROC_table[which.max(ROC_table[, 2] + ROC_table[, 3]), ]
roc.A <- verification::roc.area(roc_i$original.response,roc_i$original.predictor)
AUC.matrix[i,4] <- roc.A$p.value  ## p.value
AUC.matrix[i,5] <- cut_off[2]     ## Sp
AUC.matrix[i,6] <- cut_off[3]     ## Se
roc_i.newlist <- list(AUC = as.matrix(roc_i$auc),
sens.= as.matrix(roc_i$sensitivities),
Spec.= as.matrix(roc_i$specificities),
Thesholds = as.matrix(roc_i$thresholds),
predictor = as.matrix(roc_i$predictor),
response = as.data.frame(roc_i$response),
plots=F)
write.infile(roc_i.newlist, paste("roc_",colnames1[i],".txt",sep=''), sep = "\t")
}
row.names(AUC.matrix) <- colnames(matrix)
write.csv(AUC.matrix, "AUC.matrix.csv")
}
plot_roc.fn(Low.test, from.col = 2,
to.col = ncol(Low.test),
group.col = "Time_point",
plots = T)
getwd()
ROC_result<- plot_roc.fn(Low.test, from.col = 2,
to.col = ncol(Low.test),
group.col = "Time_point",
plots = F)
plot_roc.fn <- function(matrix,from.col,to.col, group.col, plots=F){
colnames1 <- as.character(colnames(matrix))
AUC.matrix <- matrix(nrow=ncol(matrix),ncol = 6)
colnames(AUC.matrix) <- c("AUC.CI","LL (95% CI)","UL (95% CI)","p-value","Sp","Se")
for(i in from.col:to.col) {
#hist(matrix[,i], main=colnames(matrix)[i])
png(filename = paste("roc_",colnames1[i],".png",sep=""),width = 480, height = 480, units = "px", pointsize = 16,
bg = "white", res = NA, family = "", restoreConsole = TRUE,type = c("windows", "cairo", "cairo-png"))
roc_i <- roc(matrix[,group.col] ~ matrix[,i],data=matrix,percent=T,
smooth=F,
legacy.axes=F,
ci=F,
boot.n=2000,
ci.alpha=0.7,
stratified=T,
plot=plots,
auc.polygon=T,
max.auc.polygon=T,
grid=TRUE,
print.auc=TRUE,
#print.thres='best',
print.thres.best.method='y',   # "closest.topleft", "youden"
print.thres.adj=c(-0.7, 1.5),#,c(-0.05, 2.0),c(-0.05, 5.0)),
print.thres.pattern="Cut-off: %.2f    \n\n\nSpec: %.1f \nSens: %.1f",
print.thres.pattern.cex = 1.1,
print.auc.cex = 1.1,
print.auc.y=7,
print.auc.x=83,
cex.axis=1.5,
cex.lab=1.5,
print.thres.pch=16,
print.thres.cex=2.0,
cex.main=1.5)
print(roc_i)
dev.off()
# Compute the confidence interval of the AUC (bootstrap method)
ci.auc1 <- ci.auc(roc_i,
conf.level=0.95,
boot.n = 10000,
method = "bootstrap")  # Default: 2000.
AUC.matrix[i,1] <- roc_i$auc
AUC.matrix[i,2] <- ci.auc1[1]
AUC.matrix[i,3] <- ci.auc1[3]
# AUC.vector <- c(paste("auc = ",round(roc_i$auc,3), sep = ""),
#                 paste("LL(95% CI) = ",round(ci.auc1[1],3), sep = ""),
#                 paste("UP(95% CI) = ",round(ci.auc1[3],3), sep = ""))
ROC_table <- cbind(roc_i$thresholds, roc_i$specificities, roc_i$sensitivities)
cut_off <- ROC_table[which.max(ROC_table[, 2] + ROC_table[, 3]), ]
roc.A <- verification::roc.area(roc_i$original.response,roc_i$original.predictor)
AUC.matrix[i,4] <- roc.A$p.value  ## p.value
AUC.matrix[i,5] <- cut_off[2]     ## Sp
AUC.matrix[i,6] <- cut_off[3]     ## Se
roc_i.newlist <- list(AUC = as.matrix(roc_i$auc),
sens.= as.matrix(roc_i$sensitivities),
Spec.= as.matrix(roc_i$specificities),
Thesholds = as.matrix(roc_i$thresholds),
predictor = as.matrix(roc_i$predictor),
response = as.data.frame(roc_i$response),
plots=F)
write.infile(roc_i.newlist, paste("roc_",colnames1[i],".txt",sep=''), sep = "\t")
}
row.names(AUC.matrix) <- colnames(matrix)
write.csv(AUC.matrix, "AUC.matrix.csv")
}
plot_roc.fn(Low.test, from.col = 2,
to.col = ncol(Low.test),
group.col = "Time_point",
plots = T)
